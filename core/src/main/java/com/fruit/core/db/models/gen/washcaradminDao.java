package com.fruit.core.db.models.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.fruit.core.db.models.gen.washcaradmin;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table WASHCARADMIN.
*/
public class washcaradminDao extends AbstractDao<washcaradmin, Void> {

    public static final String TABLENAME = "WASHCARADMIN";

    /**
     * Properties of entity washcaradmin.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property WashCarId = new Property(0, String.class, "washCarId", false, "WASH_CAR_ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Mobile = new Property(2, String.class, "mobile", false, "MOBILE");
        public final static Property CarLoginId = new Property(3, String.class, "carLoginId", false, "CAR_LOGIN_ID");
        public final static Property Password = new Property(4, String.class, "password", false, "PASSWORD");
    };


    public washcaradminDao(DaoConfig config) {
        super(config);
    }
    
    public washcaradminDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'WASHCARADMIN' (" + //
                "'WASH_CAR_ID' TEXT," + // 0: washCarId
                "'NAME' TEXT," + // 1: name
                "'MOBILE' TEXT," + // 2: mobile
                "'CAR_LOGIN_ID' TEXT," + // 3: carLoginId
                "'PASSWORD' TEXT);"); // 4: password
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'WASHCARADMIN'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, washcaradmin entity) {
        stmt.clearBindings();
 
        String washCarId = entity.getWashCarId();
        if (washCarId != null) {
            stmt.bindString(1, washCarId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(3, mobile);
        }
 
        String carLoginId = entity.getCarLoginId();
        if (carLoginId != null) {
            stmt.bindString(4, carLoginId);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(5, password);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public washcaradmin readEntity(Cursor cursor, int offset) {
        washcaradmin entity = new washcaradmin( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // washCarId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mobile
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // carLoginId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // password
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, washcaradmin entity, int offset) {
        entity.setWashCarId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMobile(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCarLoginId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPassword(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(washcaradmin entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(washcaradmin entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
